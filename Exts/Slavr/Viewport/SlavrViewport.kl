object SlavrViewport : SlavrViewportManipulator {
  InlineProceduralTexture texture;
  PixelRegion region;
  Ref<Slavr> slavr;
};

function SlavrViewport() {}

function SlavrViewport(io DrawingHandle handle) {
  this.init(handle);
  this.texture = this.handle.getMetaData('SlavrViewport');
  this.slavr = Slavr_GetInstance();
  this.slavr.initSlavr();
}

function SlavrViewport.clear !() {
  Color pixels[];
  pixels.resize(this.slavr.mViewport.region.size.x * this.slavr.mViewport.region.size.y);
  pixels.push(Color(this.slavr.bgColor));
  this.texture.update(this.slavr.mViewport.region.size.x, this.slavr.mViewport.region.size.y, pixels);
}

function PixelRegion SlavrViewport.getRegion ? () {
  return PixelRegion(this.mouseDownScreenPos,
                     this.mouseDownScreenPos - this.regionSize);
}

function SlavrViewport.setRegion !(PixelRegion region) {
  this.region = region;
}

function SlavrViewport.setViewport !(Ref<InlineViewport> viewport) {
  this.slavr.setViewport(viewport, this.region);
}

/// get Slavr 
function Slavr SlavrViewport.getSlavr!() {
  return this.slavr;
}


function SlavrViewport.updateRegion !() {
  this.region = this.getRegion();
}

function SlavrViewport.initTexture !() {
  report("setting pixels to :" + Size(this.region.size.x * this.region.size.y));

  this.texture.width = this.region.size.x;
  this.texture.height = this.region.size.y;
  this.texture.colorPixels.resize(0);
  this.texture.colorPixels.resize(this.region.size.x * this.region.size.y);
  this.slavr.mViewport.pixels = this.texture.colorPixels;
}

function SlavrViewport.addGeometryInstance !(io Ref<InlineInstance> instance) {
  this.slavr.addGeometryInstance(instance);
}

inline SlavrViewport.addGeometryInstance !(InlineInstance instance) {
  report("adding instance: " + instance.name);
  this.slavr.addGeometryInstance(instance);
}

function Boolean SlavrViewport.updateScene !() {
  report("updateScene");
  // report(statistics(this.slavr));
  return this.slavr.updateScene();
}

function SlavrViewport.commitScene !() {
  report("commitScene");
  this.slavr.commitScene();
}
function SlavrViewport.render !() {
  this.slavr.render();
  this.texture.version++;
}

function SlavrViewport.testRays ? (io VdbRay rays[][]) {
  this.slavr.testRays(rays);
}

function SlavrViewport.render !(io Event event) {
  this.updateRegion();
  this.clear();
  this.setViewport(event.getViewport());
  this.initTexture();
  if (this.updateScene())
    this.commitScene();
  report(statistics(this.slavr));
  this.render();
  report("DETAILS::::::::::::::::::");
  report("out of an WxH [" + this.slavr.mViewport.getDimensions().x + "x" +
         this.slavr.mViewport.getDimensions().y + "] ");
  report("i will render a portion of WxH [" +
         this.slavr.mViewport.region.size.x + "x" +
         this.slavr.mViewport.region.size.y + "]");
  report("starting from the top left corner of [" +
         this.slavr.mViewport.region.top.x + "x" +
         this.slavr.mViewport.region.top.y + "]");
  // report(statistics(this.slavr));
}
