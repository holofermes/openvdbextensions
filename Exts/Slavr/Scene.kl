require FabricSynchronization;
require Singletons;

require embree;

const String SCENE_LOCK = "Slavr.Scene";

object Scene {
  RTCScene scene;
  SlavrLight lights[];
  SlavrInstance instances[SlavrGeo];
  SlavrMaterial materials[];
  // thread safe copies of materialsRef
  Ref<SlavrMaterial> materialsRef[SlavrGeo];
  Integer lut[SlavrGeo];
  BBoxInstance bboxs[];
  Integer versions[];

  Boolean dirty;
  SimpleLock lock;
};

function Scene Scene.getInstance() {
  return Scene_GetInstance();
}

function Scene() {
  this.lock = SimpleLock(SCENE_LOCK);
  rtcInit();
}

function ~Scene() {
  rtcExit();
}

function Scene.initScene !() {
  report("initializing scene");
  AutoLock AL(this.lock);
  RTCSceneFlags flags =
      RTC_SCENE_DYNAMIC |
      RTC_SCENE_HIGH_QUALITY /*| RTC_SCENE_COMPACT, RTC_SCENE_COHERENT, RTC_SCENE_ROBUST*/;
  RTCAlgorithmFlags aflags = RTC_INTERSECT1;
  if (this.scene != null)
    rtcDeleteScene(this.scene);
  this.scene = rtcNewScene(flags, aflags);
  report("end initializing the scene");
}

function Scene.reset !() {
  this.lights.resize(0);
  this.materials.resize(0);
  this.bboxs.resize(0);
  this.versions.resize(0);
  this.dirty = true;
}

function Scene Scene_GetInstance() {
  SimpleLock lock = SimpleLock("Slavr_Scene_Lock");
  AutoLock AL(lock);

  Object _scene = Singleton_get(SCENE_LOCK);

  // Initialize the cache
  if (_scene == null) {
    _scene = Scene();
    Singleton_set(SCENE_LOCK, _scene);
  }

  return _scene;
}

function SlavrGeo Scene.addGeometry !(Ref<InlineInstance> instance) {
  AutoLock AL(this.lock);

  Ref<InlineTransformBase> tx = instance.transform;
  BBoxInstance bbox(instance, tx.version, tx.getLocalCount());

  SlavrGeo geomID = rtcNewUserGeometry(this.scene, tx.getLocalCount());
  this.bboxs.resize(geomID + 1);
  this.versions.resize(geomID + 1);

  this.bboxs[geomID] = bbox;
  this.versions[geomID] = bbox.version;

  SlavrVolumeInstance slavrInstance(this.bboxs);
  slavrInstance.geomID = geomID;
  this.instances[geomID] = slavrInstance;

  rtcSetUserData(this.scene, geomID, this.instances[geomID]);
  rtcSetBoundsFunction(this.scene, geomID);
  rtcSetIntersectFunction(this.scene, geomID);
  rtcSetOccludedFunction(this.scene, geomID);

  return geomID;
}

function Scene.addMaterial !(io SlavrMaterial material, SlavrGeo geomID) {
  AutoLock AL(this.lock);
  this.materials.push(material.dupe());
}

function Scene.addLight !(io SlavrLight light) {
  AutoLock AL(this.lock);
  this.lights.push(light);
}

function Scene.clearLights !() {
  AutoLock AL(this.lock);
  this.lights.resize(0);
}

function Scene.addMaterialRef !(Ref<SlavrMaterial> material, SlavrGeo geomID) {
  AutoLock AL(this.lock);
  this.materialsRef[geomID] = material;
}

operator parallelCommit<<<threadIndex>>>(RTCScene scene) {
  rtcCommitThread(scene, threadIndex, getCoreCount());
}

function Scene.commitScene ? () {
  UInt64 start, end;
  report("about to commit scene to accelerators.");

  if (!this.scene)
    throw("scene is not valid");
  start = getCurrentTicks();
  parallelCommit<<<getCoreCount()>>>(this.scene);
  end = getCurrentTicks();
  report("finished committing scene in: " +
         Float32(getSecondsBetweenTicks(start, end)));
}

function Boolean Scene.needsUpdate !() {
  AutoLock AL(this.lock);

  Boolean dirty = false;
  Size expectedSize = this.instances.size();

  if (expectedSize != this.materials.size())
    this.materials.resize(expectedSize);
  return dirty;
}

function Boolean Scene.updateScene !() {
  AutoLock AL(this.lock);

  Boolean dirty = false;
  Size expectedSize = this.instances.size();

  if (expectedSize != this.materials.size())
    this.materials.resize(expectedSize);

  for (geomID in this.instances) {
    Ref<InlineInstance> instance = this.bboxs[geomID].instance;
    Ref<InlineTransformBase> vltx = instance.transform;
    if (!vltx) {
      report('WARNING: instance does not have a valid transform');
      continue;
    }
    if (vltx.version != this.versions[geomID]) {
      this.versions[geomID] = vltx.version;
      Ref<SlavrMaterial> material = this.materialsRef[geomID];
      if (material.updateData(vltx.getGlobalXfo(0))) {
        this.materials[geomID] = material.dupe();
        rtcUpdate(this.scene, geomID);
        dirty = true;
      }
    }
  }
  return dirty;
}
