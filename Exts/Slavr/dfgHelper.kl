require Math;
require Slavr;
require VdbVoxelizer;

function String statistics(Ref<Slavr> slavr) {
  String sout = '\nSlavr has\n';
  sout += 'Preloaded: ' + slavr.preloadInstances.size() + '\n';
  sout += 'Instances: ' + slavr.scene.instances.size() + '\n';
  sout += 'Materials: ' + slavr.scene.materials.size() + '\n';
  sout += 'Lights: ' + slavr.scene.lights.size() + '\n';
  sout += 'Scene has: ';
  sout += 'MaterialsRef: ' + slavr.scene.materialsRef.size() + '\n';
  sout += 'Lut: ' + slavr.scene.lut.size() + '\n';
  sout += 'Bboxs: ' + slavr.scene.bboxs.size() + '\n';
  sout += 'Versions: ' + slavr.scene.versions.size() + '\n';
  sout += 'Dirty: ' + slavr.scene.dirty + '\n';
  sout += 'Lock: ' + slavr.scene.lock + '\n';
  return sout;
}

/// helper function to draw a VDBVolume
/// \dfgPresetCreate
/// \dfgPresetDefault scattering {"r": 0.6, "g": 0.9, "b": 0.9, "a": 1.0}
/// \dfgPresetDefault absorption {"r": 0.7, "g": 0.7, "b": 0.7, "a": 1.0}
/// \dfgPresetDefault primaryStep 1.0
/// \dfgPresetDefault secondaryStep 3.0
/// \dfgPresetDefault minCutoff 0.0
/// \dfgPresetDefault maxCutoff 10.0
/// \dfgPresetDefault cull false
/// \dfgPresetDefault active true
function DrawingHandle.drawVolumeVDB !(io SlavrViewport sViewport,
                                       String name,
                                       Color scattering,
                                       Color absorption,
                                       Float32 primaryStep,
                                       Float32 secondaryStep,
                                       Xfo transforms[],
                                       Boolean active,
                                       String field,
                                       Scalar minCutoff,
                                       Scalar maxCutoff,
                                       Boolean cull,
                                       Xfo boxCull,
                                       in VDBVolumes volume,
                                       out Vec3 dummyResult,
                                       out InlineInstance instance) {
  String uidName = this.uid() + '_' + name;

  InlineDrawing draw = this.getDrawing();
  if (draw.getShapeAdaptorIndex("InlineVDBVolumesShape") == -1)
    draw.registerShapeAdaptor(OGLVDBVolumesShapeAdaptor());

  InlineShader shader = OGLFloatGridVertexSS();
  SlavrMediumShader volumeShader =
      draw.registerShader(SlavrMediumShader(uidName, shader));
  InlineVDBVolumesShape shape = draw.getShape(uidName);
  if (shape == null) {
    shape = draw.registerShape(InlineVDBVolumesShape(uidName, volume));
  }

  SlavrVolumeMaterial volumeMaterialSlavr =
      volumeShader.getOrCreateSlavrMaterial(SlavrVolumeMaterial(uidName));
  volumeMaterialSlavr.setScattering(scattering);
  volumeMaterialSlavr.setAbsorption(absorption);
  volumeMaterialSlavr.setPrimaryStep(primaryStep);
  volumeMaterialSlavr.setShadowStep(secondaryStep);

  InlineMaterial material = volumeMaterialSlavr.material;

  StaticInlineTransform xform = this.rootTransform.getChild(uidName);
  if (xform == null) {
    xform = StaticInlineTransform(uidName);
    this.rootTransform.addChild(xform);
    instance = SimpleInlineInstance(uidName, xform, shape, material);
    Ref<InlineInstance> instance_ref = instance;
    sViewport.addGeometryInstance(instance_ref);
  }

  if (xform) {
    xform.setLocalCount(transforms.size());
    for (Size i = 0; i < transforms.size(); i++)
      xform.setLocalXfo(i, transforms[i]);
  }
}

/// helper function to draw a VDBVolume
/// \dfgPresetCreate
/// \dfgPresetDefault scattering {"r": 0.6, "g": 0.9, "b": 0.9, "a": 1.0}
/// \dfgPresetDefault absorption {"r": 0.7, "g": 0.7, "b": 0.7, "a": 1.0}
/// \dfgPresetDefault primaryStep 1.0
/// \dfgPresetDefault secondaryStep 3.0
/// \dfgPresetDefault minCutoff 0.0
/// \dfgPresetDefault maxCutoff 10.0
/// \dfgPresetDefault cull false
/// \dfgPresetDefault active true
function DrawingHandle.drawVolumeVDB !(io SlavrViewport sViewport,
                                       String name,
                                       Color scattering,
                                       Color absorption,
                                       Float32 primaryStep,
                                       Float32 secondaryStep,
                                       Xfo transform,
                                       Boolean active,
                                       String field,
                                       Scalar minCutoff,
                                       Scalar maxCutoff,
                                       Boolean cull,
                                       Xfo boxCull,
                                       in VDBVolumes volume,
                                       out Vec3 dummyResult,
                                       out InlineInstance instance) {
  Xfo transforms[];
  transforms.push(transform);
  this.drawVolumeVDB(sViewport, name, scattering, absorption, primaryStep,
                     secondaryStep, transforms, active, field, minCutoff,
                     maxCutoff, cull, boxCull, volume, dummyResult, instance);
}
