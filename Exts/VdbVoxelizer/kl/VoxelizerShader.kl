require InlineDrawing;

function OGLInlineShader createVoxelizerShader(String name, io InlineDrawing draw){
  OGLInlineShader vShader = draw.registerShader(OGLInlineShader(name));

  vShader.setVertexCode("
      #version 330 
      layout(location = 0) in vec4 positions;
      layout(location = 1) in vec3 normals;
      layout(location = 2) in float samples;
 
      uniform mat4 u_viewMatrix;
      uniform mat4 u_modelMatrix;
      uniform mat4 u_voxelScaler;
      uniform mat3 u_normalMatrix;


      out VertexData {
        vec3 normal;
        float sample;
      } output1;

      void main(){
        gl_Position =  positions ;
        output1.normal = u_normalMatrix * normals;
        output1.sample = samples;
      }
  ");
  vShader.setGeometryCode("
      #version 330

      layout(points) in;
      layout(triangle_strip , max_vertices=24) out;

      uniform vec3 u_light0Position;
      uniform vec4 u_light0Color;

      uniform mat4 u_projection;
      uniform mat4 u_viewMatrix;
      uniform mat4 u_modelMatrix;
      uniform mat4 u_voxelScaler;

      uniform float u_minSample;
      uniform float u_maxSample;
      uniform int u_sampleGradient;
      uniform int u_cull;
      uniform vec3 u_minBBox;
      uniform vec3 u_maxBBox;

      out float v_ratio;
      out vec3 v_normal;
      out vec3 v_lightDir;
      out vec4 v_lightColor;
      out vec3 v_eyeVec;

      in VertexData {
        vec3 normal;
        float sample;
      } input1[];

      void main(){
        if(!( input1[0].sample < u_maxSample && input1[0].sample > u_minSample ))return;

        if(u_cull == 1){
          if (!( gl_in[0].gl_Position.x >= u_minBBox.x && gl_in[0].gl_Position.x <= u_maxBBox.x &&
                 gl_in[0].gl_Position.y >= u_minBBox.y && gl_in[0].gl_Position.y <= u_maxBBox.y &&
                 gl_in[0].gl_Position.z >= u_minBBox.z && gl_in[0].gl_Position.z <= u_maxBBox.z    ))return;
        }

        //left
        float factor = 0.5;
        vec4 v_positionInv = u_viewMatrix * (u_modelMatrix * (u_voxelScaler * (gl_in[0].gl_Position + vec4(factor,-factor,factor,0.0))));
        gl_Position =u_projection *  v_positionInv;

        v_eyeVec = -v_positionInv.xyz;
        v_lightDir = (u_viewMatrix * vec4(u_light0Position, 1.0)).xyz - v_positionInv.xyz;
        v_lightColor = u_light0Color;
        if(u_sampleGradient == 1){
          v_normal = input1[0].normal;
        }
        else{
          v_normal = vec3(0.57736, -0.57736, 0.57736);
        }
        v_ratio = 0;
        EmitVertex();
        v_positionInv = u_viewMatrix * (u_modelMatrix * (u_voxelScaler * (gl_in[0].gl_Position + vec4(factor,factor,factor,0.0))));
        gl_Position =u_projection * v_positionInv;
        
        v_eyeVec = -v_positionInv.xyz;
        v_lightDir = (u_viewMatrix * vec4(u_light0Position, 1.0)).xyz - v_positionInv.xyz;
        v_lightColor = u_light0Color;
        if(u_sampleGradient == 1){
          v_normal = input1[0].normal;
        }
        else{
          v_normal = vec3(0.57736, 0.57736, 0.57736);
        }
        v_ratio = 1;
        EmitVertex();
        v_positionInv = u_viewMatrix * (u_modelMatrix * (u_voxelScaler * (gl_in[0].gl_Position + vec4(-factor,-factor,factor,0.0))));
        gl_Position =u_projection * v_positionInv;
        
        v_eyeVec = -v_positionInv.xyz;
        v_lightDir = (u_viewMatrix * vec4(u_light0Position, 1.0)).xyz - v_positionInv.xyz;
        v_lightColor = u_light0Color;
        if(u_sampleGradient == 1){
          v_normal = input1[0].normal;
        }
        else{
          v_normal = vec3(-0.57736, -0.57736, 0.57736);
        }
        v_ratio = 0;
        EmitVertex();
        v_positionInv = u_viewMatrix * (u_modelMatrix * (u_voxelScaler * (gl_in[0].gl_Position + vec4(-factor,factor,factor,0.0))));
        gl_Position =u_projection * v_positionInv;
        
        v_eyeVec = -v_positionInv.xyz;
        v_lightDir = (u_viewMatrix * vec4(u_light0Position, 1.0)).xyz - v_positionInv.xyz;
        v_lightColor = u_light0Color;
        if(u_sampleGradient == 1){
          v_normal = input1[0].normal;
        }
        else{
          v_normal = vec3(-0.57736, 0.57736, 0.57736);
        }
        v_ratio = 1;
        EmitVertex();
        EndPrimitive();

        //right
        v_positionInv = u_viewMatrix * (u_modelMatrix * (u_voxelScaler * (gl_in[0].gl_Position + vec4(factor,factor,-factor,0.0))));
        gl_Position =u_projection * v_positionInv;

        v_eyeVec = -v_positionInv.xyz;
        v_lightDir = (u_viewMatrix * vec4(u_light0Position, 1.0)).xyz - v_positionInv.xyz;
        v_lightColor = u_light0Color;
        if(u_sampleGradient == 1){
          v_normal = input1[0].normal;
        }
        else{
          v_normal = vec3(0.57736, 0.57736, -0.57736);
        }
        v_ratio = 0;
        EmitVertex();
        v_positionInv = u_viewMatrix * (u_modelMatrix * (u_voxelScaler * (gl_in[0].gl_Position + vec4(factor,-factor,-factor,0.0))));
        gl_Position =u_projection * v_positionInv;

        v_eyeVec = -v_positionInv.xyz;
        v_lightDir = (u_viewMatrix * vec4(u_light0Position, 1.0)).xyz - v_positionInv.xyz;
        v_lightColor = u_light0Color;
        if(u_sampleGradient == 1){
          v_normal = input1[0].normal;
        }
        else{
          v_normal = vec3(0.57736, -0.57736, -0.57736);
        }
        v_ratio = 0;
        EmitVertex();
        v_positionInv = u_viewMatrix * (u_modelMatrix * (u_voxelScaler * (gl_in[0].gl_Position + vec4(-factor,factor,-factor,0.0))));
        gl_Position =u_projection * v_positionInv;

        v_eyeVec = -v_positionInv.xyz;
        v_lightDir = (u_viewMatrix * vec4(u_light0Position, 1.0)).xyz - v_positionInv.xyz;
        v_lightColor = u_light0Color;
        if(u_sampleGradient == 1){
          v_normal = input1[0].normal;
        }
        else{
          v_normal = vec3(-0.57736, 0.57736, -0.57736);
        }
        v_ratio = 1;
        EmitVertex();
        v_positionInv = u_viewMatrix * (u_modelMatrix * (u_voxelScaler * (gl_in[0].gl_Position + vec4(-factor,-factor,-factor,0.0))));
        gl_Position =u_projection * v_positionInv;

        v_eyeVec = -v_positionInv.xyz;
        v_lightDir = (u_viewMatrix * vec4(u_light0Position, 1.0)).xyz - v_positionInv.xyz;
        v_lightColor = u_light0Color;
        if(u_sampleGradient == 1){
          v_normal = input1[0].normal;
        }
        else{
          v_normal = vec3(-0.57736, -0.57736, -0.57736);
        }
        v_ratio = 0;
        EmitVertex();
        EndPrimitive();

        //top
        v_positionInv = u_viewMatrix * (u_modelMatrix * (u_voxelScaler * (gl_in[0].gl_Position + vec4(factor,factor,factor,0.0))));
        gl_Position =u_projection * v_positionInv;

        v_eyeVec = -v_positionInv.xyz;
        v_lightDir = (u_viewMatrix * vec4(u_light0Position, 1.0)).xyz - v_positionInv.xyz;
        v_lightColor = u_light0Color;
        if(u_sampleGradient == 1){
          v_normal = input1[0].normal;
        }
        else{
          v_normal = vec3(0.57736, 0.57736, 0.57736);
        }
        v_ratio = 1;
        EmitVertex();
        v_positionInv = u_viewMatrix * (u_modelMatrix * (u_voxelScaler * (gl_in[0].gl_Position + vec4(factor,factor,-factor,0.0))));
        gl_Position =u_projection * v_positionInv;

        v_eyeVec = -v_positionInv.xyz;
        v_lightDir = (u_viewMatrix * vec4(u_light0Position, 1.0)).xyz - v_positionInv.xyz;
        v_lightColor = u_light0Color;
        if(u_sampleGradient == 1){
          v_normal = input1[0].normal;
        }
        else{
          v_normal = vec3(0.57736, 0.57736, -0.57736);
        }
        v_ratio = 1;
        EmitVertex();
        v_positionInv = u_viewMatrix * (u_modelMatrix * (u_voxelScaler * (gl_in[0].gl_Position + vec4(-factor,factor,factor,0.0))));
        gl_Position =u_projection * v_positionInv;

        v_eyeVec = -v_positionInv.xyz;
        v_lightDir = (u_viewMatrix * vec4(u_light0Position, 1.0)).xyz - v_positionInv.xyz;
        v_lightColor = u_light0Color;
        if(u_sampleGradient == 1){
          v_normal = input1[0].normal;
        }
        else{
          v_normal = vec3(-0.57736, 0.57736, 0.57736);
        }
        v_ratio = 1;
        EmitVertex();
        v_positionInv = u_viewMatrix * (u_modelMatrix * (u_voxelScaler * (gl_in[0].gl_Position + vec4(-factor,factor,-factor,0.0))));
        gl_Position =u_projection * v_positionInv;

        v_eyeVec = -v_positionInv.xyz;
        v_lightDir = (u_viewMatrix * vec4(u_light0Position, 1.0)).xyz - v_positionInv.xyz;
        v_lightColor = u_light0Color;
        if(u_sampleGradient == 1){
          v_normal = input1[0].normal;
        }
        else{
          v_normal = vec3(-0.57736, 0.57736, -0.57736);
        }
        v_ratio = 1;
        EmitVertex();
        EndPrimitive();

        //bottom
        v_positionInv = u_viewMatrix * (u_modelMatrix * (u_voxelScaler * (gl_in[0].gl_Position + vec4(factor,-factor,-factor,0.0))));
        gl_Position =u_projection * v_positionInv;

        v_eyeVec = -v_positionInv.xyz;
        v_lightDir = (u_viewMatrix * vec4(u_light0Position, 1.0)).xyz - v_positionInv.xyz;
        v_lightColor = u_light0Color;
        if(u_sampleGradient == 1){
          v_normal = input1[0].normal;
        }
        else{
          v_normal = vec3(0.57736, -0.57736, -0.57736);
        }
        v_ratio = 0;
        EmitVertex();
        v_positionInv = u_viewMatrix * (u_modelMatrix * (u_voxelScaler * (gl_in[0].gl_Position + vec4(factor,-factor,factor,0.0))));
        gl_Position =u_projection * v_positionInv;

        v_eyeVec = -v_positionInv.xyz;
        v_lightDir = (u_viewMatrix * vec4(u_light0Position, 1.0)).xyz - v_positionInv.xyz;
        v_lightColor = u_light0Color;
        if(u_sampleGradient == 1){
          v_normal = input1[0].normal;
        }
        else{
          v_normal = vec3(0.57736, -0.57736, 0.57736);
        }
        v_ratio = 0;
        EmitVertex();
        v_positionInv = u_viewMatrix * (u_modelMatrix * (u_voxelScaler * (gl_in[0].gl_Position + vec4(-factor,-factor,-factor,0.0))));
        gl_Position =u_projection * v_positionInv;

        v_eyeVec = -v_positionInv.xyz;
        v_lightDir = (u_viewMatrix * vec4(u_light0Position, 1.0)).xyz - v_positionInv.xyz;
        v_lightColor = u_light0Color;
        if(u_sampleGradient == 1){
          v_normal = input1[0].normal;
        }
        else{
          v_normal = vec3(-0.57736, -0.57736, -0.57736);
        }
        v_ratio = 0;
        EmitVertex();
        v_positionInv = u_viewMatrix * (u_modelMatrix * (u_voxelScaler * (gl_in[0].gl_Position + vec4(-factor,-factor,factor,0.0))));
        gl_Position =u_projection * v_positionInv;

        v_eyeVec = -v_positionInv.xyz;
        v_lightDir = (u_viewMatrix * vec4(u_light0Position, 1.0)).xyz - v_positionInv.xyz;
        v_lightColor = u_light0Color;
        if(u_sampleGradient == 1){
          v_normal = input1[0].normal;
        }
        else{
          v_normal = vec3(-0.57736, -0.57736, 0.57736);
        }
        v_ratio = 0;
        EmitVertex();
        EndPrimitive();

        //front
        v_positionInv = u_viewMatrix * (u_modelMatrix * (u_voxelScaler * (gl_in[0].gl_Position + vec4(factor,factor,-factor,0.0))));
        gl_Position =u_projection * v_positionInv;

        v_eyeVec = -v_positionInv.xyz;
        v_lightDir = (u_viewMatrix * vec4(u_light0Position, 1.0)).xyz - v_positionInv.xyz;
        v_lightColor = u_light0Color;
        if(u_sampleGradient == 1){
          v_normal = input1[0].normal;
        }
        else{
          v_normal = vec3(0.57736, 0.57736, -0.57736);
        }
        v_ratio = 1;
        EmitVertex();
        v_positionInv = u_viewMatrix * (u_modelMatrix * (u_voxelScaler * (gl_in[0].gl_Position + vec4(factor,factor,factor,0.0))));
        gl_Position =u_projection * v_positionInv;

        v_eyeVec = -v_positionInv.xyz;
        v_lightDir = (u_viewMatrix * vec4(u_light0Position, 1.0)).xyz - v_positionInv.xyz;
        v_lightColor = u_light0Color;
        if(u_sampleGradient == 1){
          v_normal = input1[0].normal;
        }
        else{
          v_normal = vec3(0.57736, 0.57736, 0.57736);
        }
        v_ratio = 1;
        EmitVertex();
        v_positionInv = u_viewMatrix * (u_modelMatrix * (u_voxelScaler * (gl_in[0].gl_Position + vec4(factor,-factor,-factor,0.0))));
        gl_Position =u_projection * v_positionInv;

        v_eyeVec = -v_positionInv.xyz;
        v_lightDir = (u_viewMatrix * vec4(u_light0Position, 1.0)).xyz - v_positionInv.xyz;
        v_lightColor = u_light0Color;
        if(u_sampleGradient == 1){
          v_normal = input1[0].normal;
        }
        else{
          v_normal = vec3(0.57736, -0.57736, -0.57736);
        }
        v_ratio = 0;
        EmitVertex();
        v_positionInv = u_viewMatrix * (u_modelMatrix * (u_voxelScaler * (gl_in[0].gl_Position + vec4(factor,-factor,factor,0.0))));
        gl_Position =u_projection * v_positionInv;

        v_eyeVec = -v_positionInv.xyz;
        v_lightDir = (u_viewMatrix * vec4(u_light0Position, 1.0)).xyz - v_positionInv.xyz;
        v_lightColor = u_light0Color;
        if(u_sampleGradient == 1){
          v_normal = input1[0].normal;
        }
        else{
          v_normal = vec3(0.57736, -0.57736, 0.57736);
        }
        v_ratio = 0;
        EmitVertex();
        EndPrimitive();

        //back
        v_positionInv = u_viewMatrix * (u_modelMatrix * (u_voxelScaler * (gl_in[0].gl_Position + vec4(-factor,factor,factor,0.0))));
        gl_Position =u_projection * v_positionInv;

        v_eyeVec = -v_positionInv.xyz;
        v_lightDir = (u_viewMatrix * vec4(u_light0Position, 1.0)).xyz - v_positionInv.xyz;
        v_lightColor = u_light0Color;
        if(u_sampleGradient == 1){
          v_normal = input1[0].normal;
        }
        else{
          v_normal = vec3(-0.57736, 0.57736, 0.57736);
        }
        v_ratio = 1;
        EmitVertex();
        v_positionInv = u_viewMatrix * (u_modelMatrix * (u_voxelScaler * (gl_in[0].gl_Position + vec4(-factor,factor,-factor,0.0))));
        gl_Position =u_projection * v_positionInv;

        v_eyeVec = -v_positionInv.xyz;
        v_lightDir = (u_viewMatrix * vec4(u_light0Position, 1.0)).xyz - v_positionInv.xyz;
        v_lightColor = u_light0Color;
        if(u_sampleGradient == 1){
          v_normal = input1[0].normal;
        }
        else{
          v_normal = vec3(-0.57736, 0.57736, -0.57736);
        }
        v_ratio = 1;
        EmitVertex();
        v_positionInv = u_viewMatrix * (u_modelMatrix * (u_voxelScaler * (gl_in[0].gl_Position + vec4(-factor,-factor,factor,0.0))));
        gl_Position =u_projection * v_positionInv;

        v_eyeVec = -v_positionInv.xyz;
        v_lightDir = (u_viewMatrix * vec4(u_light0Position, 1.0)).xyz - v_positionInv.xyz;
        v_lightColor = u_light0Color;
        if(u_sampleGradient == 1){
          v_normal = input1[0].normal;
        }
        else{
          v_normal = vec3(-0.57736, -0.57736, 0.57736);
        }
        v_ratio = 0;
        EmitVertex();
        v_positionInv = u_viewMatrix * (u_modelMatrix * (u_voxelScaler * (gl_in[0].gl_Position + vec4(-factor,-factor,-factor,0.0))));
        gl_Position =u_projection * v_positionInv;

        v_eyeVec = -v_positionInv.xyz;
        v_lightDir = (u_viewMatrix * vec4(u_light0Position, 1.0)).xyz - v_positionInv.xyz;
        v_lightColor = u_light0Color;
        if(u_sampleGradient == 1){
          v_normal = input1[0].normal;
        }
        else{
          v_normal = vec3(-0.57736, -0.57736, -0.57736);
        }
        v_ratio = 0;
        EmitVertex();
        EndPrimitive();
      }
  ");
  vShader.setFragmentCode("
      #version 150 //required for OSX support
      
      // uniform vec4 u_rootColor;
      // uniform vec4 u_tipColor;
      
      in float v_ratio;
      in vec3 v_normal;

      uniform vec4 u_ambientColor;
      uniform vec4 u_diffuseColor;
      uniform vec4 u_specularColor;
      uniform float u_specularFactor;

      in vec3 v_lightDir;
      in vec4 v_lightColor;
      in vec3 v_eyeVec;

      out vec4 out_fragColor;

      void main(){

        vec4 final_color = u_ambientColor;
        // v_vertexColor

        vec3 N;
        // N = normalize(v_normal);
        N = normalize(cross(v_normal, cross(v_normal, v_eyeVec)));

        if(dot(N, v_eyeVec) < 0.0)
          N = -N;
        vec3 L = normalize(v_lightDir);
        
        float lambertTerm = dot(N,L);
        
        if(lambertTerm > 0.0)
        {
          final_color += v_lightColor * u_diffuseColor * lambertTerm; 
          vec3 E = normalize(v_eyeVec);
          vec3 R = reflect(-L, N);
          float specular = pow( max(dot(R, E), 0.0), u_specularFactor );
          final_color += u_specularColor * specular;  
        }

        out_fragColor = final_color;
        // out_fragColor = v_normal;
        // out_fragColor = mix(u_rootColor, u_tipColor, v_ratio);
      }
  ");
  vShader.defineUniform(InlineUniform("u_viewMatrix", Mat44()));
  vShader.defineUniform(InlineUniform("u_projection", Mat44()));
  vShader.defineUniform(InlineUniform("u_modelMatrix", Mat44()));
  vShader.defineUniform(InlineUniform("u_normalMatrix", Mat33()));
  vShader.defineUniform(InlineUniform("u_voxelScaler", Mat44()));

  // vShader.defineUniform(InlineUniform("u_rootColor", Color(0.05, 0.05, 0.05)));
  // vShader.defineUniform(InlineUniform("u_tipColor", Color(1.0, 1.0, 1.0)));

  vShader.defineUniform(InlineUniform("u_light0Position", Vec3(100, 100, 100)));
  vShader.defineUniform(InlineUniform("u_light0Color", Color(1.0, 1.0, 1.0)));

  vShader.defineUniform(InlineUniform("u_ambientColor", Color(0.05, 0.05, 0.05)));
  vShader.defineUniform(InlineUniform("u_diffuseColor", Color(1.0, 1.0, 1.0)));
  vShader.defineUniform(InlineUniform("u_specularColor", Color(0.2, 0.2, 0.2)));
  vShader.defineUniform(InlineUniform("u_specularFactor", 16.0));
  vShader.defineUniform(InlineUniform("u_minSample", -1.0));
  vShader.defineUniform(InlineUniform("u_maxSample", 1.0));
  vShader.defineUniform(InlineUniform("u_sampleGradient", Integer(1)));
  vShader.defineUniform(InlineUniform("u_cull", Integer(0)));
  vShader.defineUniform(InlineUniform("u_minBBox", Vec3(-1, -1, -1)));
  vShader.defineUniform(InlineUniform("u_maxBBox", Vec3(1, 1, 1)));

  vShader.defineAttribute('positions', "vec3");
  vShader.defineAttribute('normals', "vec3");
  vShader.defineAttribute('samples', "float");
  return vShader;
}